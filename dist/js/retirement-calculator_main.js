var calculator=new Vue({el:"#calculator",data:{currentAge:"",retirementAge:"",baseSalary:"",savingsYesNo:"",currentSavings:"",annualGrowth:"",retirementIncome:"",socialSecurity:"",totalNeeded:"",saveAmount:"",seen:!1},computed:{savingsGoal:function(){if(console.log("hello"),this.currentAge>this.retirementAge)return"You can't retire in the past";if(this.retirementAge>90)return"Congrats on discovering immortality! Why not just retire right now?";let e=0,t=this.baseSalary,r=90-this.retirementAge,o=this.retirementAge-this.currentAge;for(let r=0;r<o;r++)e+=t=parseFloat((1.02*t).toFixed(2));let a=.75*t*r;t=this.baseSalary;let i=this.currentSavings,s=!0,n=.01;for(;!0===s&&n<=1;){for(let e=0;e<o;e++)i+=parseFloat((t*n).toFixed(2)),i+=parseFloat((i*this.annualGrowth).toFixed(2)),t=parseFloat((1.02*t).toFixed(2));return console.log(`${Math.round(100*n)}% of your salary: $${parseFloat(i)} of $${parseFloat(a.toFixed(2))}`),`${Math.round(100*n)}% of your salary: $${parseFloat(i)} of $${parseFloat(a.toFixed(2))}`}return n<1?Math.round(100*n):`It is impossible for you to retire at ${this.retirementAge}`}},methods:{}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
